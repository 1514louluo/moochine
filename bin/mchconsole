#!/usr/bin/env python
# vim:fileencoding=utf-8

from __future__ import print_function

import sys

if sys.version_info[0] == 2:
  import urllib2
  from urllib2 import quote as URIescape
  urlopen = urllib2.urlopen
  input = raw_input
  def b(s):
    return s
  tobytes = frombytes = b
else:
  import urllib.request
  from urllib.parse import quote as URIescape
  urlopen = urllib.request.urlopen
  def b(s):
    return s.encode('ascii')
  def tobytes(s):
    return s.encode('utf-8')
  def frombytes(s):
    return s.decode('utf-8')

import json
import struct

def parse_netint(b):
  return struct.unpack('!I', b)[0]

def pack_netint(i):
  return struct.pack('!I', i)

def recvbytes(sock, length):
  got = 0
  data = []
  while got < length:
    r = sock.recv(length - got)
    if not r:
      return
    got += len(r)
    data.append(r)
  return b('').join(data)

def fromjson(s):
  return json.loads(frombytes(s))

def tojson(d):
  return tobytes(json.dumps(d, ensure_ascii=False))

def write_response(sock, s):
  if isinstance(s, dict):
    s = tojson(s)
  if isinstance(s, str):
    s = tobytes(s)
  sock.sendall(pack_netint(len(s)) + s)

def read_response(sock):
  r = recvbytes(sock, 4)
  if not r:
    return

  length = parse_netint(r)
  data = recvbytes(sock, length)
  if data is None:
    raise Exception('client disappeared suddenly')
  return fromjson(data)

import readline
import socket

def setupReadline():
  import os, atexit
  historyPath=os.path.expanduser('~/.hdtconsole')

  def save_history():
    readline.write_history_file(historyPath)

  if os.path.exists(historyPath):
    readline.read_history_file(historyPath)
  readline.set_history_length(10000)
  atexit.register(save_history)

def main(url, host=None):
  sock = socket.socket()
  sock.listen(1)
  url = url + '?port=%d' % sock.getsockname()[1]
  if host:
    url += '&host=' + URIescape(host)

  res = urlopen(url).read()
  if res != b('ok.\r\n'):
    sys.exit('Server error: %s' % res)
  s, a = sock.accept()
  setupReadline()

  while True:
    try:
      cmd = input('hdt> ')
    except EOFError:
      print()
      break
    if not cmd:
      continue

    if cmd[0] == '=':
      cmd = 'return ' + cmd[1:]
    write_response(s, dict(cmd='code', data=cmd))
    ans = read_response(s)
    if not ans:
      pass
    elif 'result' in ans:
      print(ans['result'])
    elif 'error' in ans:
      print('Error:', ans['error'])
    else:
      print('Response:', ans)

if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(description='connect to moochine remote Lua console.')
  parser.add_argument('URL', help='url to start the Lua console')
  parser.add_argument('--host', default=None, help='my own IP for Lua to connect back')
  args = parser.parse_args()

  try:
    main(args.URL, args.host)
  except KeyboardInterrupt:
    pass
