#!/usr/bin/env lua
-- -*- lua -*-
-- Copyright 2012 Appwill Inc.
-- Author : KDr2
--
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
--


AVAILABLE_CMD={}
DOCS_OF_CMD={}

function ABS_PATH(p)
    if string.sub(p, 1, 1) ~= '.' and string.sub(p, 1, 1) ~= '/' then
        p = './' .. p --relative
    end
    if string.sub(p, 1, 3) == '../' then
        p = os.getenv('PWD') .. '/' .. p
    elseif string.sub(p, 1, 2) == './' then
        p = os.getenv('PWD') .. string.sub(p, 2)
    end
    if (string.sub(p, 1, 1) ~= '/') then return p end -- never happens
    local name_stack = {}
    p = string.sub(p, 2)
    local slash = string.find(p, '/')
    while slash do
        local d = string.sub(p, 1, slash-1)
        p = string.sub(p, slash+1)
        slash = string.find(p, '/')
        if d == '..' then
            name_stack[#name_stack] = nil
        elseif d ~= '.' then
            name_stack[#name_stack+1] = d
        end
    end
    if p == '..' then
        name_stack[#name_stack] = nil
    elseif p ~= '.' then
        name_stack[#name_stack+1] = p
    end
    return '/' .. table.concat(name_stack, '/')
end

function __FILE__()  return ABS_PATH(string.sub(debug.getinfo(2, 'S').source, 2)) end
function MCH_HOME()  return ABS_PATH(string.sub(__FILE__(), 1, -10) .. "/..") end

function register_cmd(name, func, doc)
    AVAILABLE_CMD[name] = func
    DOCS_OF_CMD[name] = doc
end

function check_args(i)
    for i = 1, i do
        if not arg[i] then
            show_help_and_exit()
        end
    end
end

function show_help_and_exit()
    print("Usage:")
    for cmd, info in pairs(DOCS_OF_CMD) do
        print("\tmoochine " .. cmd .. " " .. info)
    end
    os.exit()
end

register_cmd('help', show_help_and_exit,
             ': show this help')

function new_app()
    check_args(2)
    local name = arg[2]
    local path = arg[3] or os.getenv('PWD')
    if path == '.' then
        path = os.getenv('PWD')
    end
    path = ABS_PATH(path)

    local mch_home = MCH_HOME()

    local tmp_path = mch_home .. '/templates' -- bug if path exists
    os.execute('cp -ri '..tmp_path..' '..path)

    local wfile = io.open(path ..'/bin/mch-vars.sh', 'w+')
    wfile:write("export MOOCHINE_HOME=" .. mch_home .. '\n')
    wfile:write("export MOOCHINE_APP_NAME=" .. name .. '\n')
    wfile:write("export MOOCHINE_APP_PATH=" .. path .. '\n')
    io.close(wfile)
end

register_cmd('new', new_app,
             '<APP_NAME> <APP_PATH> : create a new moochine app')


function main()
    local cmd = arg[1]
    local func = AVAILABLE_CMD[cmd]
    if func then
        func()
    else
        show_help_and_exit()
    end
end

--run it
main()
